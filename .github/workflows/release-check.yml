name: Jupyter Server Release Check
on:
  push:
    branches: '*'
  pull_request:
    branches: '*'
jobs:
  release_check:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu]
        python-version: ['3.9']
    env:
       VERSION: "100.5.1"
       POST_VERSION: "100.6.0.dev0"
       CHANGELOG: "CHANGELOG.md"
       CHANGELOG_OUTPUT: "changelog_entry.md"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Upgrade packaging dependencies
      run: |
        pip install --upgrade pip setuptools wheel --user
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    - name: Install Dependencies
      run: |
        #pip install -e .[publishing,test]
    - name: Get Branch from environment
      run: |
        # Release check needs to run in both PR and Push
        if [[ -z ${GITHUB_BASE_REF} ]]; then
          # find the current branch using utility function
          CODE="from scripts.utils import get_branch; print(get_branch())"
          echo $CODE
          python -c "${CODE}"
          echo "BRANCH=$(python -c "${CODE}")" >> $GITHUB_ENV
        else
          # use the PR branch
          echo "BRANCH=${GITHUB_BASE_REF}" >> $GITHUB_ENV
        fi
        cat ${GITHUB_ENV}
    - name: Prep Git
      run: |
        python scripts/prep_git.py ${GITHUB_REPOSITORY} ${BRANCH}
    - name: Run the changelog prep
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/bump_version.py ${VERSION}
        python scripts/changelog_prep_script.py \
          ${GITHUB_REPOSITORY} ${CHANGELOG} \
          --branch upstream/${BRANCH}
        git diff
    - name: Make a PR with the changelog entry change
      run: |
        echo "Can't make a PR on the release check"
        git commit -a -m "Commit Changelog"
    - name: Run the release prep
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/bump_version.py ${VERSION}
        python scripts/finalize_changelog.py \
          ${GITHUB_REPOSITORY} ${CHANGELOG} \
          --branch upstream/${BRANCH} \
          --output ${CHANGELOG_OUTPUT}
        python scripts/prep_python_release.py
        python scripts/finalize_release_prep.py \
          --branch upstream/${BRANCH} \
          --post-version ${POST_VERSION}
        cat ${CHANGELOG_OUTPUT}
    - name: Publish PyPI Package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        REGISTRY: https://test.pypi.org/legacy/
      run: |
        twine upload --repository-url ${REGISTRY} --skip-existing dist/*
    - name: Extract Final Version
      run: |
        RUNNER="python -m scripts/get_final_version.py"
        echo "FINAL_VERSION=$(${RUNNER} ${VERSION})" >> $GITHUB_ENV
        cat ${GITHUB_ENV}
    - name: Push the commit(s) and tag(s) to the branch
      run: |
        echo "Can't push on the release check"
        # needs GITHUB_TOKEN in final version
        # git push upstream ${BRANCH} --tags
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        body_path: ${{ env.CHANGELOG_OUTPUT }}
        prerelease: ${{ env.VERSION != env.FINAL_VERSION }}
        draft: true
    - name: Delete Draft Release
      env:
        RELEASE_ID: ${{ steps.create_release.outputs.id }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HTML_URL: ${{ steps.create_release.outputs.html_url}}
      run: |
        echo "For release check we don't want to leave a draft release open"
        curl \
          -X DELETE \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          ${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}
