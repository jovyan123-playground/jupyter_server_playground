name: Jupyter Server Release Check
on:
  push:
    branches: '*'
  pull_request:
    branches: '*'
jobs:
  build:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        python-version: ['3.9']
    env:
       BRANCH: "master"
       VERSION: "100.5.1"
       POST_VERSION: "100.6.0.dev0"
       TARGET: "jupyter-server/jupyter_server"
       CHANGELOG: "CHANGELOG.md"
       VERSION_COMMAND: "tbump --non-interactive --only-patch"
       CHANGELOG_OUTPUT: "changelog_entry.md"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Upgrade packaging dependencies
      run: |
        pip install --upgrade pip setuptools wheel --user
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    - name: Prep Git
      env:
        BRANCH: "master"
      run: |
        # Use email address for the GitHub Actions bot
        # https://github.community/t/github-actions-bot-email-address/17204/6
        # TODO: this should be another Python script we can call with args
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Action"
        git remote add upstream https://github.com/jupyter-server/jupyter_server
        git fetch upstream ${BRANCH} --tags
    - name: Install Depedencies
      run: pip install -e .[publishing]
    - name: Run the changelog prep      
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        export REMOTE="upstream"
        bash scripts/changelog_prep.sh
    - name: Run the release prep      
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # TODO: when we call Python just pass in the full branch and split
        export REMOTE="upstream"  
        bash scripts/release_prep.sh
    - name: Publish PyPI Package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        REGISTRY: https://test.pypi.org/legacy/
      run: |
        twine upload --repository-url ${REGISTRY} --skip-existing dist/*
    - name: Extract Final Version
      run: |
        echo "FINAL_VERSION=$(echo ${VERSION} | egrep "[0-9]+\.[0-9]+\.[0-9]+")" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body_path: ${{ env.CHANGELOG_OUTPUT }}
        prerelease: ${{ env.VERSION != env.FINAL_VERSION }}
        draft: true
    - name: Delete Release
      env:
        RELEASE_ID: ${{ steps.create_release.outputs.id }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HTML_URL: ${{ steps.create_release.outputs.html_url}}
      run: |
        echo ${HTML_URL}
        curl \
          -X DELETE \
          -H "Accept: application/vnd.github.v3+json" \
          -H "authToken: ${GITHUB_TOKEN}" \
          https://api.github.com/repos/jovyan123-playground/jupyter_server_playground/releases/${RELEASE_ID}
        