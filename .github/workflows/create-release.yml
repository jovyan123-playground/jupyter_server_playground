name: Jupyter Server Release Script
on:
  workflow_dispatch:
    inputs:
      version_spec:
        description: 'New Version Specifier'
        required: true
      post_version_spec:
        description: 'Post Version Specifier'
jobs:
  release:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu]
        python-version: ['3.9']
    env:
       VERSION_SPEC: ${{ github.event.inputs.version_spec }}
       POST_VERSION_SPEC: ${{ github.event.inputs.post_version_spec }}
       REMOTE: "upstream"
       CHANGELOG: "CHANGELOG.md"
       CHANGELOG_OUTPUT: "changelog_entry.md"
       RELEASE_HELPER: "python -m scripts"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Upgrade packaging dependencies
      run: |
        pip install --upgrade pip setuptools wheel --user
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    - name: Install Dependencies
      run: |
        pip install -e .[publishing,test]
    - name: Initialize Environment
      run: |
        ${RELEASE_HELPER} prep_env
        cat ${GITHUB_ENV}
    - name: Run the changelog prep
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ${RELEASE_HELPER} prep_changelog
        git diff
    - name: Run the release prep
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ${RELEASE_HELPER} prep_release
        ${RELEASE_HELPER} prep_python
        ${RELEASE_HELPER} finalize_release
        cat ${CHANGELOG_OUTPUT}
    - name: Publish PyPI Package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        REGISTRY: https://test.pypi.org/legacy/
      run: |
        twine upload --repository-url ${REGISTRY} --skip-existing dist/*
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ env.BRANCH }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        body_path: ${{ env.CHANGELOG_OUTPUT }}
        prerelease: ${{ env.IS_PRERELEASE == 'true' }}
