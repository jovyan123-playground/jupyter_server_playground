name: Jupyter Server Changelog
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New Version'
        required: true
jobs:
  changelog:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu]
        python-version: ['3.9']
    env:
       VERSION: ${{ github.event.inputs.version }}
       CHANGELOG: "CHANGELOG.md"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Upgrade packaging dependencies
      run: |
        pip install --upgrade pip setuptools wheel --user
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    - name: Get Branch from environment
      run: |
        CODE="from scripts.utils import get_branch; print(get_branch())"
        echo "BRANCH=$(python -c $CODE}) >> $GITHUB_ENV
        cat ${GITHUB_ENV}
    - name: Prep Git
      run: |
        python scripts/prep_git.py \
          ${GITHUB_REPOSITORY} ${BRANCH}
    - name: Install Dependencies
      run: |
        pip install -e .[publishing,test]
    - name: Run the changelog prep
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/bump_version.py ${VERSION}
        python scripts/changelog_prep_script.py \
          ${GITHUB_REPOSITORY} ${CHANGELOG} \
          --branch upstream/${BRANCH}
        git diff
    - name: Make a PR with the changelog entry change
      uses: peter-evans/create-pull-request@v3
      with:
        title: "Automated Changelog for ${{ env.VERSION }} on ${{ env.BRANCH }}"
        branch-suffix: timestamp
        delete-branch: true
        base: ${{ env.BRANCH }}
        commit-message: "Generate changelog for ${{ env.VERSION }}"
        body: "Automated Changelog for ${{ env.VERSION }} on ${{ env.BRANCH }}"
